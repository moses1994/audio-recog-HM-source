facet_wrap(~ method)
## The formulas from 1 to 3 increase the number of predictors.
### to 'KNN' it does a large difference, it worsens until 30%.
### to 'LDA' it doesn't change the accuracy
### to 'RF', it enhances a bit the model, until 5%
# Error Rate Range by Threshold
ggplot(newtests_err, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=threshold), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold")
ggplot(newtests_err, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=threshold), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ method)
ggplot(newtests_err, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=method), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ formula)
## The threshold doesn't seem to change so much the performance, except by the
### the Random Forest, which has its best perform and the best group performance, on
### threshold = 1e7
# Error Rate Range by Featset
ggplot(newtests_err, aes(x=featset, y=err.rate, na.rm=T)) +
geom_point(aes(colour=featset), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Featset") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45))
ggplot(newtests_err, aes(x=featset, y=err.rate, na.rm=T)) +
geom_bar(aes(fill=featset), stat="identity", position=position_dodge()) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
scale_x_discrete() +
labs(title="Error Rate Range by Featset") +
theme_minimal() +
theme(axis.text.x=element_text(angle=90)) +
facet_wrap(~ method)
ggplot(newtests_err, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=method, shape=method), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ formula)
ggplot(newtests_err, aes(x=featset, y=err.rate, na.rm=T)) +
geom_bar(aes(fill=featset), stat="identity", position=position_dodge()) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
scale_x_discrete() +
labs(title="Error Rate Range by Featset") +
theme_minimal() +
theme(axis.text.x=element_text(angle=90)) +
facet_wrap(~ method)
ggplot(newtests_err, aes(x=featset, y=err.rate, na.rm=T)) +
geom_point(aes(colour=featset), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Featset") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45))
ggplot(newtests_err, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=method, shape=method), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ formula)
ggplot(newtests_err, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=threshold), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ method)
ggplot(newtests_err, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=threshold, shape=threshold), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ method)
ggplot(newtests_err, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=threshold,), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ method)
ggplot(newtests_err, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=threshold), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ method)
ggplot(newtests_err, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=threshold), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold")
ggplot(newtests_err, aes(x=formula, y=err.rate, na.rm=T)) +
geom_point(aes(colour=formula), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Formula") +
facet_wrap(~ method)
ggplot(newtests_err, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=threshold), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold")
ggplot(newtests_err, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=threshold), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ method)
ggplot(newtests_err, aes(x=featset, y=err.rate, na.rm=T)) +
geom_bar(aes(fill=featset), stat="identity", position=position_dodge()) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
scale_x_discrete() +
labs(title="Error Rate Range by Featset") +
theme_minimal() +
theme(axis.text.x=element_text(angle=90)) +
facet_wrap(~ method)
ggplot(newtests_err, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=method, shape=method), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ formula)
newtests_err[order(err.rate, decreasing=F)][1:10]
newtests_err[order(err.rate, decreasing=F)][1:15]
newtests_err[order(err.rate, decreasing=F)][1:12]
newtests_err[order(err.rate, decreasing=F)][1:12]
top12[, table(method)]
top12 <- newtests_err[order(err.rate, decreasing=F)][1:12]
top12[, table(method)]
top12[, table(form)]
top12[, table(formula)]
top12[, table(threshold)]
ggplot(newtests_err, aes(x=formula, y=err.rate, na.rm=T)) +
geom_point(aes(colour=formula), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Formula") +
facet_wrap(~ method)
ggplot(newtests_err, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=method, shape=method), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ formula)
ggplot(top12, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=method, shape=method), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0.0,.55)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ formula)
ggplot(top12, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=method, shape=method), size=3) +
scale_y_continuous(breaks=seq(0,.55,.05), limits=c(0,.2)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ formula)
top12[, table(method)]
top12[, table(formula)]
top12[, table(threshold)]
ggplot(top12, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=method, shape=method), size=3) +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0.05,.2)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ formula)
ggplot(top12, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=method, shape=method), size=3) +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0.1,.2)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ formula)
ggplot(top12, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=singular), size=3) +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0.1,.2)) +
labs(title="Error Rate Range by Threshold") +
ggplot(top12, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=singular), size=3) +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0.1,.2)) +
labs(title="Error Rate Range by Threshold")
test;e
newtests_err
ggplot(top12, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=featset), size=3) +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0.1,.2)) +
labs(title="Error Rate Range by Threshold")
ggplot(top12, aes(x=featset, y=err.rate, na.rm=T)) +
geom_point(aes(colour=formula), size=3) +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0.1,.2)) +
labs(title="Error Rate Range by Threshold")
ggplot(top12, aes(x=featset, y=err.rate, na.rm=T)) +
geom_point(aes(colour=method), size=3) +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0.1,.2)) +
labs(title="Error Rate Range by Threshold")
ggplot(top12, aes(x=featset, y=err.rate, na.rm=T)) +
geom_bar(aes(fill=method), position="dodge", stat="identity") +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0.1,.2)) +
labs(title="Error Rate Range by Threshold")
ggplot(top12, aes(x=featset, y=err.rate, na.rm=T)) +
geom_bar(aes(fill=method), stat="identity", position="dodge") +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0.1,.2)) +
labs(title="Error Rate Range by Threshold")
ggplot(top12, aes(x=featset, y=err.rate, na.rm=T)) +
geom_bar(aes(fill=method), stat="identity", position="dodge") +
#scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0.1,.2)) +
labs(title="Error Rate Range by Threshold")
ggplot(top12, aes(x=featset, y=err.rate, na.rm=T)) +
geom_bar(aes(fill=method, width=.5), stat="identity", position="dodge") +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0,.2)) +
labs(title="Error Rate Range by Threshold")
ggplot(top12, aes(x=featset, y=err.rate, na.rm=T)) +
geom_bar(aes(fill=method, width=.5), stat="identity", position="dodge") +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0,.2)) +
labs(title="Error Rate Range by Threshold") +
theme_minimal()
ggplot(top12, aes(x=featset, y=err.rate, na.rm=T)) +
geom_bar(aes(fill=method), stat="identity", position="dodge", width=.5) +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0,.2)) +
labs(title="Error Rate Range by Threshold") +
theme_minimal()
ggplot(top12, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=method, shape=method), size=3) +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0.1,.2)) +
labs(title="Error Rate Range by Threshold") +
facet_grid(~ formula)
ggplot(top12, aes(x=threshold, y=err.rate, na.rm=T)) +
geom_point(aes(colour=method, shape=method), size=3) +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0.1,.2)) +
labs(title="Best 12 Models - Error Rate Range by Featset") +
facet_grid(~ formula)
ggplot(top12, aes(x=featset, y=err.rate, na.rm=T)) +
geom_bar(aes(fill=method), stat="identity", position="dodge", width=.5) +
scale_y_continuous(breaks=seq(0,.55,.025), limits=c(0,.2)) +
labs(title="Best 12 Models - Error Rate Range by Featset") +
theme_minimal()
top12
source("set_environment.R")
train <- get_features( audios[, path], thrs)
source("get_metadata.R")
source("get_mfcc_features.R")
source("utils.R")
train <- get_features( audios[, path], thrs)
train <- get_features( audios[, path], thrs=1e9)
bm.qda <- qda( eval(parse(text=form.1)), train)
train <- get_features( audios[, path], thrs=1e7)
bm.qda <- randomForest( eval(parse(text=form.1)), train)
predic_qda <- function( model, test_path){
test_feat <- get_features( test_path, thrs=1e9)
preds <- predict( model, test_feat)$class
new_pred <- ifelse( sum(preds=="machine") > 0.5, "machine", "human")
return(new_pred)
}
predict_qda <- function( model, test_path){
test_feat <- get_features( test_path, thrs=1e9)
preds <- predict( model, test_feat)$class
new_pred <- ifelse( sum(preds=="machine") > 0.5, "machine", "human")
return(new_pred)
}
predict_qda("audit_newrecords/answering_machine_cutted/human_female_01.wav")
predict_qda <- function( model=bm.qda, test_path){
test_feat <- get_features( test_path, thrs=1e9)
preds <- predict( model, test_feat)$class
new_pred <- ifelse( sum(preds=="machine") > 0.5, "machine", "human")
return(new_pred)
}
predict_qda("audit_newrecords/answering_machine_cutted/human_female_01.wav")
predict_qda <- function( test_path, model=bm.qda){
test_feat <- get_features( test_path, thrs=1e9)
preds <- predict( model, test_feat)$class
new_pred <- ifelse( sum(preds=="machine") > 0.5, "machine", "human")
return(new_pred)
}
predict_qda("audit_newrecords/answering_machine_cutted/human_female_01.wav")
View(get_prediction)
View(get_prediction)
predict_qda <- function( test_path, model=bm.qda){
test_feat <- get_features( test_path, thrs=1e9)
preds <- predict( model, test_feat)
new_pred <- ifelse( sum(preds$class=="machine") > 0.5, "machine", "human")
return(new_pred)
}
predict_qda("audit_newrecords/answering_machine_cutted/human_female_01.wav")
debugonce(predict_qda)
predict_qda("audit_newrecords/answering_machine_cutted/human_female_01.wav")
test_path
model
test_feat
preds
predict_qda <- function( test_path, model=bm.qda){
test_feat <- get_features( test_path, thrs=1e9)
preds <- predict( model, test_feat)
new_pred <- ifelse( sum(preds=="machine") > 0.5, "machine", "human")
return(new_pred)
}
predict_qda("audit_newrecords/answering_machine_cutted/human_female_01.wav")
predict_qda("audit_newrecords/answering_machine_cutted/human_female_02.wav")
predict_qda("audit_newrecords/answering_machine_cutted/human_female_03.wav")
new_pred <- ifelse( mean(preds=="machine") > 0.5, "machine", "human")
predict_qda("audit_newrecords/answering_machine_cutted/human_female_03.wav")
preds <- predict( model, test_feat)
predict_qda <- function( test_path, model=bm.qda){
test_feat <- get_features( test_path, thrs=1e9)
preds <- predict( model, test_feat)
new_pred <- ifelse( mean(preds=="machine") > 0.5, "machine", "human")
return(new_pred)
}
predict_qda("audit_newrecords/answering_machine_cutted/human_female_03.wav")
predict_qda("audit_newrecords/answering_machine_cutted/human_female_05.wav")
predict_qda("audit_newrecords/answering_machine_cutted/human_female_15.wav")
predict_qda("audit_newrecords/answering_machine_cutted/machine_female_15.wav")
predict_rf <- function( test_path, model=bm.rf){
test_feat <- get_features( test_path, thrs=1e7)
preds <- predict( model, test_feat)
new_pred <- ifelse( mean(preds=="machine") > 0.5, "machine", "human")
return(new_pred)
}
train <- get_features( audios[, path], thrs=1e9)
bm.qda <- qda( eval(parse(text=form.1)), train)
train <- get_features( audios[, path], thrs=1e7)
bm.rf <- randomForest( eval(parse(text=form.1)), train)
predict_qda <- function( test_path, model=bm.qda){
test_feat <- get_features( test_path, thrs=1e9)
preds <- predict( model, test_feat)
new_pred <- ifelse( mean(preds=="machine") > 0.5, "machine", "human")
return(new_pred)
}
predict_rf <- function( test_path, model=bm.rf){
test_feat <- get_features( test_path, thrs=1e7)
preds <- predict( model, test_feat)
new_pred <- ifelse( mean(preds=="machine") > 0.5, "machine", "human")
return(new_pred)
}
predict_qda("audit_newrecords/answering_machine_cutted/machine_male_01.wav")
predict_qda("audit_newrecords/answering_machine_cutted/machine_male_02.wav")
predict_qda("audit_newrecords/answering_machine_cutted/machine_male_03.wav")
predict_qda("audit_newrecords/answering_machine_cutted/machine_male_01.wav")
predict_qda("audit_newrecords_2/cutted_carrier_message/machine_male_02.wav")
predict_qda("audit_newrecords_2/cutted_carrier_message/machine_male_03.wav")
predict_rf("audit_newrecords_2/cutted_carrier_message/machine_male_03.wav")
predict_rf("audit_newrecords_2/cutted_carrier_message/machine_male_02.wav")
predict_rf("audit_newrecords_2/cutted_carrier_message/machine_male_01.wav")
predict_qda("audit_newrecords_2/cutted_carrier_message/machine_male_01.wav")
testdir = "./audit_newrecords_2/cutted_carrier_message/"
sapply( list.files(testdir), predict_qda)
sapply( normalizePath(list.files(testdir)), predict_qda)
sapply( list.files(testdir, full.names = T), predict_qda)
testdir = "./audit_newrecords_2/cutted_carrier_message"
sapply( list.files(testdir, full.names = T), predict_qda)
sapply( list.files(testdir, full.names = T), predict_rf)
train <- get_features( audios[, path], thrs=1e9)
bm.qda <- qda( eval(parse(text=form.1)), train)
predict_qda <- function( test_path, model=bm.qda){
test_feat <- get_features( test_path, thrs=1e9)
preds <- predict( model, test_feat)
new_pred <- ifelse( mean(preds=="machine") > 0.5, "machine", "human")
return(new_pred)
}
sapply( list.files(testdir, full.names = T), predict_qda)
test_feat <- get_features( test_path, thrs=1e9)
list.files(testdir, full.names = T)[1]
test_path=list.files(testdir, full.names = T)[1]
test_feat <- get_features( test_path, thrs=1e9)
preds <- predict( model, test_feat)
model=bm.qda
preds <- predict( model, test_feat)
preds
ifelse( mean(preds=="machine") > 0.5, "machine", "human")
mean(preds=="machine")
mean(preds$class=="machine")
predict_qda <- function( test_path, model=bm.qda){
test_feat <- get_features( test_path, thrs=1e9)
preds <- predict( model, test_feat)
new_pred <- ifelse( mean(preds$class=="machine") > 0.5, "machine", "human")
return(new_pred)
}
sapply( list.files(testdir, full.names = T), predict_qda)
testdir = "./audit_newrecords_2/cutted_human_answer"
sapply( list.files(testdir, full.names = T), predict_qda)
sapply( list.files(testdir, full.names = T), predict_rf)
predict_qda("./audit_newrecords_2/cutted_human_answer/human_female_08.wav")
predict_rf("./audit_newrecords_2/cutted_human_answer/human_female_08.wav")
testdir = "./audit_newrecords_2/cutted_human_answer"
sapply( list.files(testdir, full.names = T), predict_qda)
sapply( list.files(testdir, full.names = T), predict_rf)
testdir = "./audit_newrecords_2/cutted_unknown"
sapply( list.files(testdir, full.names = T), predict_qda)
sapply( list.files(testdir, full.names = T), predict_rf)
testdir = "./audit_newrecords_2/cutted_unknown"
sapply( list.files(testdir, full.names = T), predict_qda)
sapply( list.files(testdir, full.names = T), predict_rf)
test <- get_metadata(testdir)
test
testdir_set <-  c("./audit_newrecords_2/cutted_carrier_message",
"./audit_newrecords_2/cutted_human_answer",
"./audit_newrecords_2/cutted_unknown")
testfiles <- rbindlist( lapply(testdir_set, get_metadata))
testfiles
testfiles[, "pred_qda":=sapply( testfiles[, path], predict_qda)]
testfiles[, "pred_rf":=sapply( testfiles[, path], predict_rf)]
testdir_set <-  c("./audit_newrecords_2/cutted_carrier_message/",
"./audit_newrecords_2/cutted_human_answer/",
"./audit_newrecords_2/cutted_unknown/")
testfiles <- rbindlist( lapply(testdir_set, get_metadata))
testfiles[, "pred_qda":=sapply( testfiles[, path], predict_qda)]
testfiles[, "pred_rf":=sapply( testfiles[, path], predict_rf)]
testfiles
testfiles[, table(source, pred_qda)]
testfiles[, table(source, pred_rf)]
testfiles[, list("acc_qda" = mean(source==pred_qda), "acc_rf" = mean(source==pred_rf))]
source("set_environment.R")
source("get_metadata.R")
source("get_mfcc_features.R")
source("utils.R")
## BEST MODEL CHOSEN
### QDA - FORMULA 1 - THRESHOLD 1e9
### RANDOM FOREST - FORMULA 1 - THRESHOLD 1e7
train <- get_features( audios[, path], thrs=1e9)
bm.qda <- qda( eval(parse(text=form.1)), train)
train <- get_features( audios[, path], thrs=1e7)
bm.rf <- randomForest( eval(parse(text=form.1)), train)
predict_qda <- function( test_path, model=bm.qda){
test_feat <- get_features( test_path, thrs=1e9)
preds <- predict( model, test_feat)
new_pred <- ifelse( mean(preds$class=="machine") > 0.5, "machine", "human")
return(new_pred)
}
predict_rf <- function( test_path, model=bm.rf){
test_feat <- get_features( test_path, thrs=1e7)
preds <- predict( model, test_feat)
new_pred <- ifelse( mean(preds=="machine") > 0.5, "machine", "human")
return(new_pred)
}
testdir_set <-  c("./audit_newrecords_2/cutted_carrier_message/",
"./audit_newrecords_2/cutted_human_answer/",
"./audit_newrecords_2/cutted_unknown/")
testfiles <- rbindlist( lapply(testdir_set, get_metadata))
testfiles[, "pred_qda":=sapply( testfiles[, path], predict_qda)]
testfiles[, "pred_rf":=sapply( testfiles[, path], predict_rf)]
testfiles[, table(source, pred_qda)]
testfiles[, table(source, pred_rf)]
testfiles[, list("acc_qda" = mean(source==pred_qda), "acc_rf" = mean(source==pred_rf))]
saveRDS(bm.qda, "bm.qda.rds")
saveRDS(bm.rf, "bm.rf.rds")
summary(bm.rf)
source("set_environment.R")
source("get_metadata.R")
source("get_mfcc_features.R")
source("utils.R")
setwd("models/")
rf.fit <- readRDS("bm.rf.rds")
saveRDS(bm.rf, "bm.rf.form1.th1e7.rds")
saveRDS(bm.qda, "bm.qda.form1.th1e9.rds")
source("../set_environment.R")
source("../get_mfcc_features.R")
setwd("models/")
rf.fit <- readRDS("bm.rf.rds")
args <- commandArgs(trailingOnly=TRUE)
predict_rf <- function( filepath){
frames_feat <- get_features( filepath, thrs=1e7)
pred_frames <- predict( model, frames_feat)
pred <- ifelse( mean(pred_frames=="machine") > 0.5, "machine", "human")
return(pred)
}
for(i in length(args)){
pred <- predict_rf( args[i])
print( list(args[i] = pred))
}
a="kk"
eval(a)
source("../set_environment.R")
source("../get_mfcc_features.R")
setwd("models/")
rf.fit <- readRDS("bm.rf.rds")
args <- commandArgs(trailingOnly=TRUE)
predict_rf <- function( filepath){
frames_feat <- get_features( filepath, thrs=1e7)
pred_frames <- predict( model, frames_feat)
pred <- ifelse( mean(pred_frames=="machine") > 0.5, "machine", "human")
return(pred)
}
for(i in length(args)){
pred <- predict_rf( args[i])
print( list(eval(args[i]) = pred))
}
source("../set_environment.R")
source("../get_mfcc_features.R")
setwd("models/")
rf.fit <- readRDS("bm.rf.rds")
args <- commandArgs(trailingOnly=TRUE)
predict_rf <- function( filepath){
frames_feat <- get_features( filepath, thrs=1e7)
pred_frames <- predict( model, frames_feat)
pred <- ifelse( mean(pred_frames=="machine") > 0.5, "machine", "human")
return(pred)
}
for(i in 1:length(args)){
pred <- predict_rf( args[i])
print( list( eval(args[i]) = pred))
}
print( getwd())
?source
list(eval(a)="J")
list( quote(a)="J")
list( quotes(a)="J")
?eval
expression(a)
expression(eval(a))
quote(a)
a
enquote(a)
b="jj"
list(a=b)
list(eval(a)=b)
list(quote(a)=b)
list(enquote(a)=b)
list(get(a)=b)
get(a)
list(eval(a)=b)
list(eval(parse(text="a")))=b)
list(eval(parse(text="a"))=b)
substitute(a)
deparse(substitute(a))
eval(a)
quote(eval(a))
unquote(eval(a))
substitute(eval(a))
enquote(eval(a))
list(enquote(eval(a))=b)
